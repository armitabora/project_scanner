from flask import Flask, render_template, request, send_file, session, jsonify
from scanner import scan_website, clean_url
import os
import random
import time
import threading
from queue import Queue

app = Flask(__name__)
app.secret_key = "your_secret_key_here"  

'''Define the reports directory'''
REPORTS_DIR = "/Users/armitabora/Documents/vuln_scanner/vulnerabilityDetector/reports"
os.makedirs(REPORTS_DIR, exist_ok=True)  

'''Thread-safe queue to store scan results'''
scan_queue = Queue()

def background_scan(url):
    """Run the scan in the background and store results in the queue."""
    results = scan_website(url)
    scan_queue.put((url, results))

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    url = request.form.get('url', '').strip()
    if not url or "." not in url:
        return "Error: Invalid URL provided", 400

    url = clean_url(url)
    session['start_time'] = time.time()
    session['scan_url'] = url

    '''Start the scan in a background thread'''
    thread = threading.Thread(target=background_scan, args=(url,))
    thread.start()

    return render_template('progress.html', url=url)

@app.route('/progress')
def progress():
    """Return the current scan progress."""
    if not scan_queue.empty():
        url, results = scan_queue.get()
        session['scan_results'] = results
        session['processing_time'] = time.time() - session['start_time']
        return jsonify({"progress": 100})
    return jsonify({"progress": 50})


@app.route('/results')
def results():
    """Display the scan results."""
    if 'scan_results' not in session:
        return "Scan results not found. Please start a new scan.", 400

    results = session['scan_results']
    processing_time = session.get('processing_time', 0)
    return render_template('results.html', url=session['scan_url'], results=results, processing_time=processing_time)

@app.route('/download/pdf/<path:url>')
def download_pdf(url):
    results = session.get('scan_results', {})
    if not results:
        return "Scan results not found. Please start a new scan.", 400

    '''Clean the URL for use in the filename'''
    clean_url = url.replace("https://", "").replace("http://", "").replace("/", "_")
    pdf_path = os.path.join(REPORTS_DIR, f"{clean_url}.pdf")

    '''Create the PDF'''
    from reportlab.lib.pagesizes import letter
    from reportlab.pdfgen import canvas
    c = canvas.Canvas(pdf_path, pagesize=letter)
    c.drawString(100, 750, f"Website Vulnerability Report for {url}")
    y_position = 730
    for key, value in results.items():
        c.drawString(100, y_position, f"{key}: {value}")
        y_position -= 20
    c.save()

    
    return send_file(pdf_path, as_attachment=True)

@app.route('/download/csv/<path:url>')
def download_csv(url):
    results = session.get('scan_results', {})
    if not results:
        return "Scan results not found. Please start a new scan.", 400

    
    clean_url = url.replace("https://", "").replace("http://", "").replace("/", "_")
    csv_path = os.path.join(REPORTS_DIR, f"{clean_url}.csv")

    '''Creating CSV'''
    import pandas as pd
    df = pd.DataFrame(results.items(), columns=["Check", "Result"])
    df.to_csv(csv_path, index=False)

    
    return send_file(csv_path, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)